pipeline {
  agent {
    docker {
      image 'docker.artifactorymaven-mc:3.8.1-jdk-11'
      args '-v $HOME/.m2:/root/.m2'
      registryUrl 'https://docker.artifactory'
      registryCredentialsId 'b038094e-f70e-4da6-8213-de71268ffb61'
    }    
  }
  environment {
    // Build Variables
    MS_PATH = "viewer"
    //MAVEN Variables
    REPO_NAME = "repository"
    //BRANCH_NAME = "master"
    GITCRED_ID = "ddfd8f48-360e-423c-bac7-108501d4097e"
    REPO_GIT_URL = "http://github/maven-repo.git"
    MAVEN_REP = "$HOME/.m2/repository"
    MVN_SONAR = "mvn -U install sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=12da26dd7454ec9e385d260e6413cb55f088e4f9 -Dsonar.language=java -Dmaven.test.skip"
    MVN_DOCKER = "com.spotify:dockerfile-maven-plugin:1.4.13"
    MAVEN_INSTALL_CMD="mvn clean install -DskipTests"
    TARGETDIR = "target/docker"
    MICRO_TAGS = "${BUILD_NUMBER}"

    
    //Minio Variable
    GLOBAL_ARG = "--insecure"
    GITCRED_IDS= "GITCRED"
    NAME= "GIT_NAME"
    ID= "GIT_MAIL"
   // MINIO = "minio"

    
  }
  parameters {
    string(name: 'MICROSERVICES_PATH',
      defaultValue: 'viewer',
      description: 'Specify Microservice Path , if you have multiple microservice in git you can give path space seprated')
    string(name: 'GIT_URL',
      defaultValue: 'http://github/kunaltripurai.git',
      description: 'Specify Katana Git URL')      
    string(name: 'BRANCH_NAME',
      defaultValue: '',
      description: 'Specify Branch Name')
    booleanParam(name: 'Sonar_Check',
      defaultValue: false,
      description: 'Tick the box to run Sonar')
    string(name: 'TarName',
      defaultValue: 'pr-routing-service',
      description: 'Specify tar name')
    string(name: 'CHART_URL',
      defaultValue: 'http://github/kunaltripurari.git',
      description: 'Specify Katana Git URL')      
    string(name: 'CHART_BRANCH_NAME',
      defaultValue: '',
      description: 'Specify Branch Name')
  }
  options {
    ansiColor('xterm')
    buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '50'))
  }
  stages {
    stage('Clean WS') {
      steps {
        echo "Cleaning WORKSPACE"
        sh 'rm -rf *; pwd ; ls -ltrh'
      }
      post {
          failure {
             script { env.FAILURE_STAGE = 'Cleaning Workspace' }
            }
        }
    }
    stage('Git Checkout') {
         parallel {
        stage('SCM: Checkout') {
          steps {
            git branch: "${params.BRANCH_NAME}",
            credentialsId: "${GITCRED_ID}",
            url: "${params.GIT_URL}"
            sh 'echo "listing Current Directory" && ls -ltrh'
          }
          post {
          failure {
             script { env.FAILURE_STAGE = 'SCM Checkout' }
            }
        }
        }
        //post {
          //failure {
            // script { env.FAILURE_STAGE = 'SCM Checkout' }
            //}
        //}
        stage('InternalRepo: Checkout') {
          steps {
            sh '[ -d ../$REPO_NAME ] && echo "Directory Exists" || mkdir ../$REPO_NAME'
            dir("../${REPO_NAME}"){
            git branch: 'master',
            credentialsId: "${GITCRED_ID}", 
            url: "${REPO_GIT_URL}"
            sh 'echo "listing Current Directory" && ls -ltrh; pwd'
           }
		  sh '"echo Listing WORKSPACE Directory" && ls -ltrh; pwd'
        }
        post {
          failure {
             script { env.FAILURE_STAGE = 'Internal Rep Checkout' }
            }
        }
      }
    }
    }
    stage("Sonar Check"){
        when {
            expression {
                params.Sonar_Check == true
                }
            }   
        steps{
            echo "Sonar Check"
           script {
            env.INTERNAL_REPO_PATH = "file://${env.WORKSPACE}/repository"           
          }
          configFileProvider([configFile(fileId: '2ea81bae-5d61-4748-bc7d-b2110bfbb25e', variable: 'MAVEN_SETTINGS_XML')]) {
          sh '''
          echo "MS Path is $MICROSERVICES_PATH"
          for i in ${MICROSERVICES_PATH}; do 
          cd $i
          echo "Installing Artifactories To Local Repo: ${i}"
          ${MVN_SONAR} -s $MAVEN_SETTINGS_XML
          cd -
          done
          '''              
          }           
        }
        post {
          failure {
             script { env.FAILURE_STAGE = 'Sonar Check' }
            }
        }
    }
    stage('BUILD: Maven Build Creation') {
        steps {
          script {
            env.INTERNAL_REPO_PATH = "file://${env.WORKSPACE}/repository"
          }
          echo "env is ${env.INTERNAL_REPO_PATH}"
          configFileProvider([configFile(fileId: '2ea81bae-5d61-4748-bc7d-b2110bfbb25e', variable: 'MAVEN_SETTINGS_XML')]) {
          sh '''
          echo "MS Path is $MICROSERVICES_PATH"
          for i in ${MICROSERVICES_PATH}; do 
          pwd
          echo "Installing Artifactories To Local Repo: ${i}"
          echo "listing Current Directory" && ls -ltrh; pwd
          ${MAVEN_INSTALL_CMD} -s $MAVEN_SETTINGS_XML
          cd -
          done
          '''
          }
        }
        post {
          failure {
             script { env.FAILURE_STAGE = 'Maven Build Creation' }
            }
        }
      } 
      stage("LIB_PUSH: Zadara S3"){
          when {
            expression {
                params.Zadara_Push == true
               }
            }
        steps{
          echo "====++++executing A++++===="
          script {
                    withCredentials([usernamePassword(credentialsId: "${params.STORAGE}", passwordVariable: 'MINIO_SECRET_KEY', usernameVariable: 'MINIO_ACCESS_KEY')]) {
            sh '''
              cd $MICROSERVICES_PATH
              ls -ltrh
              if [ -d "target" ]; then
               cd target
               pwd
               ls -ltrh 
               echo $MICROSERVICES_PATH
               if [ "$MICROSERVICES_PATH" = "jos" ]; then
               cp jos-1.0.jar.original lib/
               tar -cvzf ../target/"$MICROSERVICES_PATH"_lib.tar lib/
               ls -ltrh
               elif [ "$MICROSERVICES_PATH" = "scheduler" ]; then
               cp scheduler-1.0.jar.original lib/
               tar -cvzf ../target/"$MICROSERVICES_PATH"_lib.tar lib/
               ls -ltrh
               else
               cp viewer-1.0.jar.original lib/
               tar -cvzf ../target/"$MICROSERVICES_PATH"_lib.tar lib/
               ls -ltrh
               fi
              else
                echo "lib dir doesnt exist"
              exit 1
              fi
              mc alias set minio ${ZADARA_SERVICE_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} ${GLOBAL_ARG}
              if [ $? -eq 0 ]; then
              echo "alias set sucessfully"
              mc ${GLOBAL_ARG} ls ${ZADARA_LIB_PATH}
              count=$(mc ${GLOBAL_ARG} find ${ZADARA_LIB_PATH} --name ${MICROSERVICES_PATH}_lib.tar | wc -l )
              echo "$count"
              #back=$(mc ${GLOBAL_ARG} find ${ZADARA_LIB_PATH} --name ${MICROSERVICES_PATH}_lib_bkp.tar | wc -l)
              #echo "$back"
              if [ "$count" = "1" ]; then
              echo "Creating Minio Backups"
              mc ${GLOBAL_ARG} ls $ZADARA_LIB_PATH
              #mc ${GLOBAL_ARG} mv --c ${ZADARA_LIB_PATH}${MICROSERVICES_PATH}_lib.tar ${ZADARA_LIB_PATH}${MICROSERVICES_PATH}_lib_bkp.tar
              cd ../
              pwd
              mc ${GLOBAL_ARG} ls $ZADARA_LIB_PATH
              mc ${GLOBAL_ARG} cp $ZADARA_LIB_PATH${MICROSERVICES_PATH}_lib.tar .
              mv ${MICROSERVICES_PATH}_lib.tar ${MICROSERVICES_PATH}_lib_bkp.tar
              ls
              mc ${GLOBAL_ARG} rm $ZADARA_LIB_PATH${MICROSERVICES_PATH}_lib.tar
              mc ${GLOBAL_ARG} cp ${MICROSERVICES_PATH}_lib_bkp.tar $ZADARA_LIB_PATH
              rm ${MICROSERVICES_PATH}_lib_bkp.tar
              cd target/
              pwd
              mc ${GLOBAL_ARG} cp ${MICROSERVICES_PATH}_lib.tar $ZADARA_LIB_PATH
              mc ${GLOBAL_ARG} ls $ZADARA_LIB_PATH
              #elif [ "$back" = "1" ]; then
             # echo "Deleting backups"
             # mc ${GLOBAL_ARG} rm ${ZADARA_LIB_PATH}${MICROSERVICES_PATH}_lib_bkp.tar
             # mc ${GLOBAL_ARG} cp ../target/${MICROSERVICES_PATH}_lib.tar $ZADARA_LIB_PATH
             # mc ${GLOBAL_ARG} ls $ZADARA_LIB_PATH
              else
              mc ${GLOBAL_ARG} cp ../target/${MICROSERVICES_PATH}_lib.tar $ZADARA_LIB_PATH
              mc ${GLOBAL_ARG} ls $ZADARA_LIB_PATH
              fi
              else
              echo "minio alias not set check with minio URL and ACCESS KEY"
              fi
              rm -rf ../target/${MICROSERVICES_PATH}_lib.tar lib; ls -ltrh ../
              cd ..
            '''
                    }
                    }
        }
        post {
          failure {
             script { env.FAILURE_STAGE = 'Minio/Zadara S3 Push' }
            }
        }
      }
      stage("Pushing docker Image"){
        when {
            expression {
                params.IMAGE_BUILD == true
               }
            }
        steps{
            echo "====++++executing A++++===="
            withCredentials([usernamePassword(credentialsId: 'b038094e-f70e-4da6-8213-de71268ffb61', passwordVariable: 'PASSWD', usernameVariable: 'USERNAME')]){
                sh '''
                cd $MICROSERVICES_PATH
                ls | grep -v "user_run.sh\\|Dockerfile\\|target\\|mc.tar.gz\\|default.conf\\|error.html\\|supervisord.conf\\|nginx.conf\\|prerouting.sh\\|auto-reload-nginx.sh" | xargs rm -rf
                ls -ltrh
                docker login -u $USERNAME -p $PASSWD $DOCKER_REGISTRY
                docker build --no-cache . -t ${DOCKER_REGISTRY}$MICROSERVICES_PATH:${IMAGE_VERSION}  --build-arg APP_NAME=$MICROSERVICES_PATH --build-arg 
                docker push ${DOCKER_REGISTRY}$MICROSERVICES_PATH:${IMAGE_VERSION}
                echo ${DOCKER_REGISTRY}$MICROSERVICES_PATH:$VERSION >> ${WORKSPACE}/images
                cd -
                '''
            }
        }
        post {
          failure {
             script { env.FAILURE_STAGE = 'Pushing docker Image' }
            }
        }
    }
        stage('Charts Workspace cleanup'){
            when {
            expression {
                params.IMAGE_BUILD == true
               }
            }
            steps{
                script{
                    cleanWs()
                }
            }
        }
        stage("Helm Chatrs Download"){
            when {
            expression {
                params.IMAGE_BUILD == true
               }
            }
            steps{
                echo "====++++executing GIT CLONE++++===="
            script {
                        dir("${TarName}"){
                        git branch: "${BRANCH_NAME}",
                        credentialsId: "${GITCRED_IDS}",
                        url: "${CHART_URL}"
                        sh 'echo "listing Current Directory" && ls -ltrh'
                        sh '''
                       ls -ltrh
                      cp charts/''' +"$TarName"+ '''.tar.gz .
                      tar xf ''' +"$TarName"+ '''.tar.gz
                      ls -ltrh
                       '''
                     } 
                     }  
            }
            post {
          failure {
             script { env.FAILURE_STAGE = 'Helm Chatrs Download' }
            }
        }
        }
        stage("Update Charts"){
            when {
            expression {
                params.IMAGE_BUILD == true
               }
            }
            steps{
                echo "====++++Updating Image Name++++===="
                script {
                withCredentials([usernamePassword(credentialsId: "${GITCRED_IDS}", passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                sh '''
                pwd
                cd $TarName
                tar xf ''' +"$TarName"+ '''.tar.gz
                rm "$TarName".tar.gz
                ls -lthr
                cd $TarName
               REPO=$(cat values.yaml | grep -w "repository")
                TAGS=$(cat values.yaml | grep -w "tag")
                echo $REPO
                echo $TAGS
                echo $IMAGE_NAME
                #sed -i 's/$REPO/$IMAGE/g' values.yaml
                sed -i '0,/^\\([[:space:]]*repository: *\\).*/s@@\\1'"${DOCKER_REGISTRY}$MICROSERVICES_PATH"'@;0,/\\([[:space:]]*tag: *\\).*/s@@\\1'"$IMAGE_VERSION"'@;' values.yaml
                cat values.yaml | grep -w "repository"
                cat values.yaml | grep -w "tag"
                cd ../
                tar -cvzf ''' +"$TarName"+ '''.tar.gz "$TarName"
                rm -rf ${MICROSERVICES_PATH}
                ls -ltrh
                cd charts
                rm "$TarName".tar.gz
                mv ../"$TarName".tar.gz .
                pwd
                git remote set-url origin  http://${USERNAME}:${PASSWORD}@${GITHUB_URL}
                git config --global user.email "${ID}"
                git config --global user.name "${NAME}"
                git add .
                git commit -m "update charts"
                git push -u origin $BRANCH_NAME                          
                '''
                     }
                }
            }
            post {
          failure {
             script { env.FAILURE_STAGE = 'Update Charts' }
            }
        }
        }
  }
  post {
success {
echo "sending success notification..."
emailext (
attachLog: true,
to: 'kunaltripurari@gmail.com',
subject: "Jenkins Job '${env.JOB_NAME}' succeed",
body: "Please check http://${env.BUILD_URL.split('/')[2]}/blue/organizations/jenkins/${env.JOB_NAME}/detail/${env.JOB_NAME}/${env.BUILD_NUMBER}/pipeline/ for detailed console logs. \n\n If above URL doesn't work use ${env.BUILD_URL}console."
)
}
failure {
echo "sending failure notification... FAILURE_STAGE =${env.FAILURE_STAGE} env.BUILD_URL = ${env.BUILD_URL}"
emailext (
attachLog: true,
to: 'kunaltripurari@GMAIL.com',subject: "Jenkins Job '${env.JOB_NAME}' failed at '${env.FAILURE_STAGE}' Stag",body: "Please check http://${env.BUILD_URL.split('/')[2]}/blue/organizations/jenkins/${env.JOB_NAME}/detail/${env.JOB_NAME}/${env.BUILD_NUMBER}/pipeline/ for detailed console logs. \n\n If above URL doesn't work use ${env.BUILD_URL}console."
)
}
}
}
